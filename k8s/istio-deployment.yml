apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: my-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
# Virtual services
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: my-entry-service
spec:
  gateways:
    - my-gateway
  hosts:
  - "*"
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: app
        subset: v1
      weight: 90
    - destination:
        host: app
        subset: v2
      weight: 10
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: model-service-virtual-service
spec:
  hosts:
  - model-service
  http:
  - route:
    - destination:
        host: model-service
        subset: v1
      weight: 100
    mirror:
      host: model-service
      subset: v2
    mirrorPercentage:
      value: 50.0
# ---
# apiVersion: networking.istio.io/v1alpha3
# kind: VirtualService
# metadata:
#   name: my-entry-service
# spec:
#   gateways:
#     - my-gateway
#   hosts:
#   - "*"
#   http:
#   - match:
#     - uri:
#         prefix: /
#     route:
#     - destination:
#         host: app
#         subset: v1
#       weight: 90
#     - destination:
#         host: app
#         subset: v2
#       weight: 10
# ---
# apiVersion: networking.istio.io/v1alpha3
# kind: VirtualService
# metadata:
#   name: model-service-virtual-service
# spec:
#   hosts:
#   - model-service
#   http:
#   - match:
#     - sourceLabels:
#         version: v2
#     route:
#     - destination:
#         host: model-service
#         subset: v2
#   - route:
#     - destination:
#         host: model-service
#         subset: v1
---
# ------------------------------------
# Services
# ------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: model-service
  labels:
    app: model-service
    service: model-service
spec:
  selector:
    app: model-service
  ports:
  - name: http
    port: 5001
    targetPort: 5001
---
apiVersion: v1
kind: Service
metadata:
  name: app
  labels:
    app: app
    service: app
spec:
  selector:
    app: app
  ports:
  - name: http
    port: 5000
    targetPort: 5000
---
# ------------------------------------
# Destination rules
# ------------------------------------
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: model-service-drule
spec:
  host: model-service
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: app-drule
spec:
  host: app
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---
# ------------------------------------
# First experiment deployment
# ------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-v1
  labels: { app: app, version: v1 }
spec:
  selector:
    matchLabels: { app: app, version: v1 }
  template:
    metadata:
      labels: { app: app, version: v1 }
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "5000"
    spec:
      containers:
      - name: app
        image: ghcr.io/remla23-team04/app:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: MODEL_SERVICE_URL
            valueFrom:
              configMapKeyRef:
                name: model-service-config
                key: url
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-secret
                key: password
        ports:
          - containerPort: 5000       
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-service-deployment-v1
  labels: { app: model-service, version: v1 }
spec:
  selector:
    matchLabels: { app: model-service, version: v1 }
  template:
    metadata:
      labels: { app: model-service, version: v1 }
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "5001"
    spec:
      containers:
      - name: model-service
        image: ghcr.io/remla23-team04/model-service:latest
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 5001
---
# ------------------------------------
# Second experiment deployment
# ------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment-v2
  labels: { app: app, version: v2 }
spec:
  selector:
    matchLabels: { app: app, version: v2 }
  template:
    metadata:
      labels: { app: app, version: v2 }
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "5000"
    spec:
      containers:
      - name: app
        image: ghcr.io/remla23-team04/app:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: MODEL_SERVICE_URL
            valueFrom:
              configMapKeyRef:
                name: model-service-config
                key: url
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-secret
                key: password
        ports:
          - containerPort: 5000       
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-service-deployment-v2
  labels: { app: model-service, version: v2 }
spec:
  selector:
    matchLabels: { app: model-service, version: v2 }
  template:
    metadata:
      labels: { app: model-service, version: v2 }
      annotations:
         prometheus.io/scrape: "true"
         prometheus.io/port: "5001"
    spec:
      containers:
      - name: model-service
        image: ghcr.io/remla23-team04/model-service:0.1.10
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 5001
---
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
data:
  password: dGVhbTA0

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: model-service-config
data:
  url: "http://model-service:5001"